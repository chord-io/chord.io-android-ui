/**{{#description}}
    * {{{description}}}{{/description}}
{{#vars}}
    * @property {{{name}}}{{#description}} {{description}}{{/description}}
{{/vars}}
*/

{{#vendorExtensions.x-abstract}}abstract {{/vendorExtensions.x-abstract}}{{^vendorExtensions.x-abstract}}open {{/vendorExtensions.x-abstract}}class {{classname}}(
{{#parentVars}}
    {{name}}: {{datatype}}{{^-last}},
    {{/-last}}
{{/parentVars}}
{{#hasVars}}{{#parentSchema}},
{{/parentSchema}}
{{#requiredVars}}
    {{>data_class_req_var}}{{^-last}},
    {{/-last}}
{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
{{/hasOptional}}{{/hasRequired}}
{{#optionalVars}}
    {{>data_class_opt_var}}{{^-last}},
    {{/-last}}
{{/optionalVars}}
{{/hasVars}}
): Serializable{{#parent}}, {{{parent}}}(
{{#parentVars}}
    {{name}}{{^-last}},
{{/-last}}
{{/parentVars}}
){{/parent}}
{
{{#hasEnums}}
{{#vars}}
    {{#isEnum}}
        /**{{#description}}
            * {{{description}}}{{/description}}
        * Values:{{#allowableValues}} {{#enumVars}}{{&name}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}
        */
        @JsonClass(generateAdapter = false)
        enum class {{enumName}}(val value: {{complexType}}) {
        {{#allowableValues}}{{#enumVars}}        @Json(name = {{{value}}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}{{{newline}}}{{/enumVars}}{{/allowableValues}}
    {{/isEnum}}
{{/vars}}
{{/hasEnums}}
    {{#parentSchema}}override {{/parentSchema}}{{^parentSchema}}open {{/parentSchema}}fun copy(): {{classname}}
    {
        val byteArrayOutputStream = ByteArrayOutputStream()
        val objectOutputStream = ObjectOutputStream(byteArrayOutputStream)
        objectOutputStream.writeObject(this)
        objectOutputStream.close()
        val byteArrayInputStream = ByteArrayInputStream(byteArrayOutputStream.toByteArray())
        val objectInputStream = ObjectInputStream(byteArrayInputStream)
        return objectInputStream.readObject() as {{classname}}
    }
}