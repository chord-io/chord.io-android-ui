/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: chord.io
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package io.chord.client.apis

import io.chord.client.models.*
import okhttp3.RequestBody

import io.reactivex.Single
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST

@JvmSuppressWildcards
interface ArithmeticIntervalApi {
  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: FromDegreeAndQuality",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/from-degree-and-quality")
  fun fromDegreeAndQuality(
    @retrofit2.http.Body  body: DegreeAndQualityIntervalDto
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: FromDegreeAndSemitones",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/from-degree-and-semitones")
  fun fromDegreeAndSemitones(
    @retrofit2.http.Body  body: DegreeAndSemitonesIntervalDto
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param index  (required)
   */
  @Headers(
    "X-Operation-Id: FromIntegral"
  )
  @POST("/api/arithmetic/interval/from-integral/{index}")
  fun fromIntegral(
    @retrofit2.http.Path("index") index: Int
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: FromNotes",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/from-notes")
  fun fromNotes(
    @retrofit2.http.Body  body: NotePairDto
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: FromSemitonesAndQuality",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/from-semitones-and-quality")
  fun fromSemitonesAndQuality(
    @retrofit2.http.Body  body: SemitonesAndQualityIntervalDto
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param interval  (required)
   */
  @Headers(
    "X-Operation-Id: FromString"
  )
  @POST("/api/arithmetic/interval/from-string/{interval}")
  fun fromString(
    @retrofit2.http.Path("interval") interval: String
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   */
  @Headers(
    "X-Operation-Id: GetLookUpTable"
  )
  @GET("/api/arithmetic/interval/look-up-table")
  fun getLookUpTable()
    : Single<Map<String, Map<String, IntervalQuality>>>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: Invert",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/invert")
  fun invert(
    @retrofit2.http.Body  body: IntervalDto
  ): Single<IntervalDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: ToIntegral",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/to-integral")
  fun toIntegral(
    @retrofit2.http.Body  body: IntervalDto
  ): Single<Int>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param root  (required)
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: ToNote",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/to-note/{root}")
  fun toNote(
    @retrofit2.http.Path("root") root: String,
    @retrofit2.http.Body  body: IntervalDto
  ): Single<NoteDto>

  /**
   * The endpoint is owned by chord.io.api service owner
   * @param format  (required)
   * @param body  (optional)
   */
  @Headers(
    "X-Operation-Id: ToString",
    "Content-Type: application/json-patch+json"
  )
  @POST("/api/arithmetic/interval/to-string/{format}")
  fun toString(
    @retrofit2.http.Path("format") format: String,
    @retrofit2.http.Body  body: IntervalDto
  ): Single<String>

}
